Handle :

< 
> 
<< 
>> 
$VAR 
$?


"$USER" same as $USER    =>  replace by env_var value
'$USER' format is literal


All that is found should be either a future: command or cmd_flag or cmd_argument or pipe or redirection of any type
But I must only process formats meaning: SUJET + VERBE + COD or CMD FLAG ARG
but if it's "incorrect" input : JE SUIT CONTENibwf54S it's not my job to know it's incorrect,
I only tag elements for later processing during exec.

I seek correct format for builtin functions
I seek parsing errors such as odd number of quotes and such
I provide clean input for exec: 'e''c''h'o' "he"l'l'o becomes echo hello

	On va devoir parser l'user input, ce qui suit le prompt "minishell >>>"
	Donc, on va avoir ce char * en bordel, qu'il faut passer au peigne fin.
	Comment procede t on?
Step 1?
	D'abord on cherche 39 (') et 34 ("), OR un pipe solo OR \0
	if quote
		is there matching end quote ?
			if yes
			proceed and skip all special meaning of 
			specials characters (except ending quote or $ inside "")
	if solo pipe
		strdup tout ce que j'ai jusqu'ici into a variable
		formattage* de la variable (aÃ¯e) AND put into a node of our linked list, node = node->next
		go again til \0 shows up
	if \0								// WHERE DOES THIS IF CONDITION FIT BEST ?
		same as solo pipe, strdup, formating*, put into node

Step 2?
	if export found
		format : word=stuff
		what's directly before = sign is an arg
		what's directly after = sign is stuff til space character or \0
		if nothing after = sign, arg is NULL (returns nothing or is == to NULL, is there a diff? do i create env_var yo=NULL?)

Step 3?
	Make ft_new_split (for whitespaces AND that skips quotes)
	clear all quotes 			// WHY ?
	put all into command list   // WYM ?



	*formating



||||||||||||||||||

todo :

inside double quotes, a backslash alone appears normally, 2 backslash only one appears, and backslash escapes double quote character apparently

try to see the project as multiple mini-projects, all adding up to a minishell
